<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util.xsd
       	http://www.springframework.org/schema/aop 
       	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
       	http://www.springframework.org/schema/tx 
       	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
	<dubbo:application name="user"  />
 
    <!-- 使用multicast广播注册中心暴露服务地址 -->
    <dubbo:registry address="zookeeper://192.168.1.181:2181" />
 
    <!-- 用dubbo协议在20880端口暴露服务 -->
    <dubbo:protocol name="dubbo" port="20880" />
 
    <!-- 声明需要暴露的服务接口 -->
    <dubbo:service interface="com.swarmcn.api.service.IUserService" ref="userService" />
 
    <!-- 和本地bean一样实现服务 -->
    <bean id="userService" class="com.swarmcn.user.service.impl.UserService" />
    
    <util:properties id="dataSourceProps" location="classpath:system.properties" />
    
    <aop:aspectj-autoproxy proxy-target-class="true" />
    
    <!-- 数据源配置,使用druid数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" > 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="#{dataSourceProps['jdbc.driver']}" />
	    
		<!-- 基本属性 url、user、password -->
		<property name="url" value="#{dataSourceProps['jdbc.url']}" />
		<property name="username" value="#{dataSourceProps['jdbc.username']}" />
		<property name="password" value="#{dataSourceProps['jdbc.password']}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="#{dataSourceProps['jdbc.minIdle']}" />
		<property name="minIdle" value="#{dataSourceProps['jdbc.minIdle']}" /> 
		<property name="maxActive" value="#{dataSourceProps['jdbc.maxActive']}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" /> 
	</bean>
	
	<!--事务管理DataSourceTransactionManager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- Spring iBatis SqlMapClient -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>

	<!-- 自动扫描mapper配置和dao映射，无需写mybatis-config.xml -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.swarmcn.user.dao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
    
</beans>